// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package billing

import (
	"errors"
	"fmt"
)

const (
	// StatePending is a State of type pending.
	StatePending State = "pending"
	// StateDesign is a State of type design.
	StateDesign State = "design"
	// StateLayout is a State of type layout.
	StateLayout State = "layout"
	// StateCompleted is a State of type completed.
	StateCompleted State = "completed"
)

var ErrInvalidState = errors.New("not a valid State")

// String implements the Stringer interface.
func (x State) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x State) IsValid() bool {
	_, err := ParseState(string(x))
	return err == nil
}

var _StateValue = map[string]State{
	"pending":   StatePending,
	"design":    StateDesign,
	"layout":    StateLayout,
	"completed": StateCompleted,
}

// ParseState attempts to convert a string to a State.
func ParseState(name string) (State, error) {
	if x, ok := _StateValue[name]; ok {
		return x, nil
	}
	return State(""), fmt.Errorf("%s is %w", name, ErrInvalidState)
}
